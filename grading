Project 2
-------------------------------------------------------------------------------

Contributor Code Docu Adj. Score
----------- ---- ---- ---- -----
Aarna        643   26    0 18/20 A
Medha        622   24    0 18/20 A

-------------------------------------------------------------------------------

Rubric:
1. Baseline:   15
2. Creativity: +1       pemdas
3. Design:     +1       nice UI
4. Clean code: +0.5
5. Document:   +0.5
   Total:      18

Comments:
* SwingUI2.java
- The code is easy to read, yay.
- You could do more to simplify the code of individual buttons. Maybe derive a
  CalcButton class from JButton with a generic default addActionListener?
- I think there are some buttons that aren't fully implemented? If there some
  way to use stored expressions then I'm missing it ...

* Translator.java
- Good job implementing order of operations and parentheses!
- The approach is a little brittle: if you added operators with a different
  precedence (e.g. ==), you would need to add explicit new code to handle them.
- It doesn't handle errors cleanly. I often get exceptions printed on the
  console.

* README.md
- I like the breakdown into baseline functionality and aspirational features
  to do "if time permits". That breakdown may not seem like much of an
  innovation, but having that approach can save you from a lot of grief from
  overreach.

-------------------------------------------------------------------------------

Generic fine print:
a. "Code" shows the approximate lines of code contributed. This is just a line
   count of "git blame" and shouldn't be taken too seriously. Still, in many
   cases it gives quick sniff test of who did how much work.
b. "Docu" is the same thing applied to the documentation if it is in markdown.
c. "Adj." is a credit adjustment for contributors who did significantly more or
   less than than average contributor. Credit adjustments sum to 0.
d. "Score" is the final score, taken by adding the lines from the rubric and
   the credit adjustment.

1. "Baseline" means all requirements are met. This gives you a C if it's all you
   have.
2. "Creativity" is a measure of how much tought and energy you put into going
   beyond the minimum requirements.
   Points can be deducted here if some requirements are missing.
3. "Design" gives extra points for the look of the UI and overall usability.
   Points can be deducted here if there are errors or crashes.
4. "Clean code" indicates how easy the code is to read. Good code consists of
   short functions with clear names, organized in a coherent way.
   Points can be deducted here if code is redundant or especially messy.
5. "Document" gives extra points if the documentation is especially clear or
   comprehensive.
   Points can be deducted here if the documentation is missing or insufficient.
